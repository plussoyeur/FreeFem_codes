/* Variables */
real [int,int] stats(lm.n,4);
real[int] xx(lm.n), yy(lm.n);
int size = 0; /* count */

macro fitvortex(Tmesh,density,localmin,regions){
  /*===============================================================
    Loop over each basin of attraction
    ===============================================================*/
  for(int j = 0; j < localmin.n; j++){
    cout << "Nous sommes a l'iteration : " << j << " / " << localmin.n << endl;
  
    /* Trunc mesh -> reduce to one basin of attraction*/
    mesh Thj = trunc(Tmesh, floor(r)==localmin(j,1), label = -1); /* take the jth minimum*/

    /* Declare Pi sub-espace related to the truncated mesh*/
    fespace Vhj(Thj,P1);
    fespace Phj(Thj,P0);

    /* Restrict GPE solution to the truncated mesh*/
    Vhj rhoj = density;

    /* Compute useful parameters from truncated mesh*/
    int globalindmin = localmin(j,0); /*ind of min on the global mesh*/
    real xjG = Th(globalindmin).x; /* x coord for the min*/
    real yjG = Th(globalindmin).y; /* y coord for the min*/
    real rG = sqrt(xjG^2+yjG^2); /*dist from center of initial mesh*/

    /*===============================================================
       Restrict mesh by maximizing gradient
       ===============================================================*/

    
    varf vbord(u,v) = on(-1,u=rhoj); /* Define varf to extract values of uj on the border*/
    real[int] vb = vbord(0,Vhj,tgv=1); /* Stores these values in an array*/
    vb = vb ? vb : 10^8; /* If inside the truncated mesh : 0 -> 10‚Å∏*/
    int whereminborder = vb.imin; /* Find min on the border*/
    real xminborder = Thj(whereminborder).x; /* x coord of this min*/
    real yminborder = Thj(whereminborder).y; /* y coord of this min*/
    
    real radiusminborder = sqrt((xminborder-xjG)^2 + (yminborder-yjG)^2); /* Distance from the center of the mesh to the min on border*/
    mesh Thjj = trunc(Thj, (sqrt( (x-xjG)^2+(y-yjG)^2 ) < radiusminborder), label = -2 ); /* Trunc truncated mesh*/
  
    fespace Vhjj(Thjj,P1); /* Define P1 functional space on this new mesh*/
    fespace Phjj(Thjj,P0); /* Define P0 functional space on this new mesh*/

    Vhjj rhojj = rhoj; /* Restrict function on this new mesh*/   

    bool ret;
    include "fit-ipopt.idp"
      
      BestFit1(2,Vhjj,rhojj[],2,ret);
  }

}
//EOM

fitvortex(Th,rho,lmtrue,r)