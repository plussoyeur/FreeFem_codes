macro controlbasins(Tmesh,density,argument,localmin,regions)
{
  real[int] rtilde(localmin.n);
  real cpu = clock();
  /* Area of the domain -> should not be used */
  real aire = int2d(Th,levelset=1e-3-density)(1.);
  /* Maximum density of the domain -> should not be used */
  real rhomax = density[].max;
  for(int j = 0; j < localmin.n; j++){
    /* Trunc mesh -> reduce to one basin of attraction*/
    mesh Thtrunc = trunc(Tmesh, floor(regions) == j, label = -1); /* take the jth minimum */
    fespace Vhtrunc(Thtrunc, P1);
    Vhtrunc arguhtrunc= argument;
    /* Integrate wave fonction around the vortex */
    real vortexcharge = int1d(Thtrunc,-1)(-dx(arguhtrunc)*N.y + dy(arguhtrunc)*N.x);
    string title = "Mesh : " + j + "   " + vortexcharge;
    /* cout << vortexcharge << endl; */
    /*if(abs(vortexcharge) < 20){plot(uhtrunc,wait=1,cmm=title);}*/



    /* Previous method still not working */
    Vhtrunc rhotrunc = density;
    real rhotruncmin = rhotrunc[].min, rhotruncmax = rhotrunc[].max;


    if( rhotruncmin < 0.3*rhotruncmax && rhotruncmax >  rhomax*0.1 && Thtrunc.area < 3*aire/lm.n &&  Thtrunc.area > 0.1*aire/lm.n  )
	  {
	    rtilde(j)=1;
	  }
	else
	  {
	    rtilde(j)=0;
	  }
  }
  constantbyvortex = rtilde(real(regions));
  plot(constantbyvortex,fill=1,wait=1);
  cout << "CPU time = " << clock()-cpu << endl;
}
//EOM

controlbasins(Th,rho,arguh,lm,r);