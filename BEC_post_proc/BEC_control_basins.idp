NewMacro controlbasins(Tmesh,density,wavefunction,localmin,regions)
{
  real cpu = clock();
  int k = 0;
  
  for(int j = 0; j < localmin.n; j++){
    int globalindmin = lm[j];
    real xjG = Th(globalindmin).x; 
    real yjG = Th(globalindmin).y;
    
    /* Trunc mesh -> reduce to one basin of attraction*/
    mesh Thtrunc = trunc(Tmesh, floor(regions) == j, label = -1); /* take the jth minimum */
    
    fespace Vhtrunc(Thtrunc, P1);
    Vhtrunc<complex> uhtrunc= wavefunction;
  
    /* Integrate gradient of the phase of the wave function  around the vortex */
    real charge = int1d(Thtrunc)( (-N.y*imag(dx(uh)*conj(uh))+N.x*imag(dy(uh)*conj(uh)))/max(norm(uh),0.0001))/(2*pi);
    //cout << charge << endl;
    real epsilon = 0.01;
    if(abs(abs(charge)-1) < epsilon){
      lmtilde(j)=1;
      lmtrue(k,0) = lm(j);
      lmtrue(k,1) = j;
      k++;
    }
    else{
      lmtilde(j) = 0;
    }
  }
  lmtrue.resize(k,2);
  constantbyvortex = lmtilde(real(regions));
  plot(constantbyvortex,fill=1,wait=1);
  cout << "CPU time = " << clock()-cpu << endl;
}
EndMacro

controlbasins(Th,rho,uh,lm,r);



    


//   /* Previous method still not working */
//   Vhtrunc rhotrunc = density;
//   real rhotruncmin = rhotrunc[].min, rhotruncmax = rhotrunc[].max;


//   if( rhotruncmin < 0.3*rhotruncmax && rhotruncmax >  rhomax*0.1 && Thtrunc.area < 3*aire/lm.n &&  Thtrunc.area > 0.1*aire/lm.n  )
//     {
// 	lmtilde(j)=1;
// 	lmtrue(k,0) = lm(j);
// 	lmtrue(k,1) = j;
// 	k++;
//     }
//   else
//     {
// 	lmtilde(j)=0;
//     }
// }
// lmtrue.resize(k,2);
// constantbyvortex = lmtilde(real(regions));
// plot(constantbyvortex,fill=1,wait=1);
// cout << "CPU time = " << clock()-cpu << endl;