/* Variables */
real [int,int] stats(lm.n,3);
real[int] coordx(lm.n), coordy(lm.n);
int size = 0; /* count */

NewMacro fitvortex(Tmesh,density,localmin,regions){
  /*===============================================================
    Loop over each basin of attraction
    ===============================================================*/
  for(int j = 0; j < localmin.n; j++){
    cout << "Nous sommes a l'iteration : " << j << " / " << localmin.n << endl;
  
    /* Trunc mesh -> reduce to one basin of attraction*/
    mesh Thj = trunc(Tmesh, floor(r)==localmin(j,1), label = -1); /* take the jth minimum*/

    /* Declare Pi sub-espace related to the truncated mesh*/
    fespace Vhj(Thj,P1);
    fespace Phj(Thj,P0);

    /* Restrict GPE solution to the truncated mesh*/
    Vhj rhoj = density;

    /* Compute useful parameters from truncated mesh*/
    int globalindmin = localmin(j,0); /*ind of min on the global mesh*/
    real xjG = Th(globalindmin).x; /* x coord for the min*/
    real yjG = Th(globalindmin).y; /* y coord for the min*/
    real rG = sqrt(xjG^2+yjG^2); /*dist from center of initial mesh*/

    /*===============================================================
       Restrict mesh by taking the lowest isovalue on the border
       ===============================================================*/

    
    varf vbord(u,v) = on(-1,u=rhoj); /* Define varf to extract values of uj on the border*/
    real[int] vb = vbord(0,Vhj,tgv=1); /* Stores these values in an array*/
    vb = vb ? vb : 10^8; /* If inside the truncated mesh : 0 -> 10‚Å∏*/
    int whereminborder = vb.imin; /* Find min on the border*/
    real xminborder = Thj(whereminborder).x; /* x coord of this min*/
    real yminborder = Thj(whereminborder).y; /* y coord of this min*/
    
    real radiusminborder = sqrt((xminborder-xjG)^2 + (yminborder-yjG)^2); /* Distance from the center of the mesh to the min on border*/
    mesh Thjj = trunc(Thj, (sqrt( (x-xjG)^2+(y-yjG)^2 ) < radiusminborder), label = -2 ); /* Trunc truncated mesh*/
  
    fespace Vhjj(Thjj,P1); /* Define P1 functional space on this new mesh*/
    fespace Phjj(Thjj,P0); /* Define P0 functional space on this new mesh*/

    Vhjj rhojj = rhoj; /* Restrict function on this new mesh*/

    /*===============================================================
      Starting parameters : solving a linear system to fit an ellipse
      ===============================================================*/
    real[int] alpha(5), alphainit(5); /*x0,y0,a(xx),b(xy),c(yy)*/
    real[int] alphatilde(5);
    real R = abs(rhojj[].max-rhojj[].min);
	
    varf vbord2(uh,vh) = on(-2,uh=rhojj);
    real[int] vb2 = vbord2(0,Vhjj,tgv=1);
    vb2 = vb2 ? vb2 : 10^8;
    cout << "Min border : " << vb2.min << endl;
    real minborder = .6*vb2.min;
    real val = sqrt(abs(log(minborder)));
    cout << "Val : " << val << endl;
    
    real[int,int] M(3,3);
    M(0,0) = int1d(Thjj,levelset=rhojj-minborder)( (x-xjG)^4  );
    M(0,1) = int1d(Thjj,levelset=rhojj-minborder)( (x-xjG)^3*(y-yjG)  );
    M(0,2) = int1d(Thjj,levelset=rhojj-minborder)( (x-xjG)^2*(y-yjG)^2  );
    M(1,0) = int1d(Thjj,levelset=rhojj-minborder)( (x-xjG)^3*(y-yjG)  );
    M(1,1) = int1d(Thjj,levelset=rhojj-minborder)( (x-xjG)^2*(y-yjG)^2  );
    M(1,2) = int1d(Thjj,levelset=rhojj-minborder)( (x-xjG)*(y-yjG)^3 );
    M(2,0) = int1d(Thjj,levelset=rhojj-minborder)( (x-xjG)^2*(y-yjG)^2  );
    M(2,1) = int1d(Thjj,levelset=rhojj-minborder)( (y-yjG)^3*(x-xjG)  );
    M(2,2) = int1d(Thjj,levelset=rhojj-minborder)( (y-yjG)^4  );
     
    inv(M);

    real[int] SM(3);
    SM(0) = int1d(Thjj,levelset=rhojj-minborder)( (x-xjG)^2  )*val;
    SM(1) = int1d(Thjj,levelset=rhojj-minborder)( (x-xjG)*(y-yjG)  )*val;
    SM(2) = int1d(Thjj,levelset=rhojj-minborder)( (y-yjG)^2  )*val;

    alphainit(2:4) = M*SM;
    alphainit(0) = xjG;
    alphainit(1) = yjG;
    
    alphatilde = alphainit;
    alpha = alphainit;
    cout << "Gauss param init : " << alpha << endl;

    /*===============================================================
      GAUSSIAN functionals and functionnal derivative : definition
      ===============================================================*/
    
    macro f(r2) (1.-exp(-r2))//
    macro df(r2,dr2) (dr2*exp(-r2))//
    
    func xx = x-alpha[0];
    func yy = y-alpha[1];
    
    func r2 = alpha[2]*xx*xx + alpha[3]*xx*yy + alpha[4]*yy*yy;

    // First derivative
    func d0r2 = -2*alpha[2]*xx - alpha[3]*yy;
    func d1r2 = -2*alpha[4]*yy - alpha[3]*xx;
    func d2r2 = xx*xx;
    func d3r2 = xx*yy;
    func d4r2 = yy*yy;
       
    func fgauss = f(r2);
    
    func d0 = df(r2,d0r2);
    func d1 = df(r2,d1r2);
    func d2 = df(r2,d2r2);
    func d3 = df(r2,d3r2);
    func d4 = df(r2,d4r2);

    // Second derivative
    func d00r2 = 2*alpha[2];
    func d10r2 = alpha[3];
    func d20r2 = -2*xx;
    func d30r2 = -yy;
    func d40r2 = 0;

    func d01r2 = alpha[3];
    func d11r2 = 2*alpha[4];
    func d21r2 = 0;
    func d31r2 = -xx;
    func d41r2 = -2*yy;

    func d02r2 = -2*xx;
    func d12r2 = 0;
    func d22r2 = 0;
    func d32r2 = 0;
    func d42r2 = 0;

    func d03r2 = -yy;
    func d13r2 = -xx;
    func d23r2 = 0;
    func d33r2 = 0;
    func d43r2 = 0;

    func d04r2 = 0;
    func d14r2 = -2*yy;
    func d24r2 = 0;
    func d34r2 = 0;
    func d44r2 = 0;

    func d00 = df(r2,d00r2-d0r2*d0r2);
    func d10 = df(r2,d10r2-d1r2*d0r2);
    func d20 = df(r2,d20r2-d2r2*d0r2);
    func d30 = df(r2,d30r2-d3r2*d0r2);
    func d40 = df(r2,d40r2-d4r2*d0r2);

    func d01 = df(r2,d01r2-d0r2*d1r2);
    func d11 = df(r2,d11r2-d1r2*d1r2);
    func d21 = df(r2,d21r2-d2r2*d1r2);
    func d31 = df(r2,d31r2-d3r2*d1r2);
    func d41 = df(r2,d41r2-d4r2*d1r2);
    
    func d02 = df(r2,d02r2-d0r2*d2r2);
    func d12 = df(r2,d12r2-d1r2*d2r2);
    func d22 = df(r2,d22r2-d2r2*d2r2);
    func d32 = df(r2,d32r2-d3r2*d2r2);
    func d42 = df(r2,d42r2-d4r2*d2r2);

    func d03 = df(r2,d03r2-d0r2*d3r2);
    func d13 = df(r2,d13r2-d1r2*d3r2);
    func d23 = df(r2,d23r2-d2r2*d3r2);
    func d33 = df(r2,d33r2-d3r2*d3r2);
    func d43 = df(r2,d43r2-d4r2*d3r2);

    func d04 = df(r2,d04r2-d0r2*d4r2);
    func d14 = df(r2,d14r2-d1r2*d4r2);
    func d24 = df(r2,d24r2-d2r2*d4r2);
    func d34 = df(r2,d34r2-d3r2*d4r2);
    func d44 = df(r2,d44r2-d4r2*d4r2);
    
    
   
    /* Gaussian functionnal*/
    func real Jgauss(real[int] & alphatilde){
      alpha = alphatilde;
      return int2d(Thjj)(0.5*abs(fgauss-rhojj)^2);
    }

    /* Gaussian functionnal derivative*/
    func real[int] DJgauss(real [int] & alphatilde){
      alpha = alphatilde; 
      real[int] res(5);
      res[0] = int2d(Thjj)( (fgauss-rhojj)*d0  );
      res[1] = int2d(Thjj)( (fgauss-rhojj)*d1  );
      res[2] = int2d(Thjj)( (fgauss-rhojj)*d2  );
      res[3] = int2d(Thjj)( (fgauss-rhojj)*d3  );
      res[4] = int2d(Thjj)( (fgauss-rhojj)*d4  );

      return res;
  
    }

    /* Gaussian hessian */
    func matrix DDJgauss(real [int] & alphatilde){
      alpha = alphatilde;
      real[int,int] res(5,5);

      res(0,0) = int2d(Thjj)( (fgauss-rhojj)*d00 + d0*d0   );
      res(0,1) = int2d(Thjj)( (fgauss-rhojj)*d10 + d1*d0   );
      res(0,2) = int2d(Thjj)( (fgauss-rhojj)*d20 + d2*d0   );
      res(0,3) = int2d(Thjj)( (fgauss-rhojj)*d30 + d3*d0   );
      res(0,4) = int2d(Thjj)( (fgauss-rhojj)*d40 + d4*d0   );

      res(1,0) = int2d(Thjj)( (fgauss-rhojj)*d01 + d0*d1   );
      res(1,1) = int2d(Thjj)( (fgauss-rhojj)*d11 + d1*d1   );
      res(1,2) = int2d(Thjj)( (fgauss-rhojj)*d21 + d2*d1   );
      res(1,3) = int2d(Thjj)( (fgauss-rhojj)*d31 + d3*d1   );
      res(1,4) = int2d(Thjj)( (fgauss-rhojj)*d41 + d4*d1   );

      res(2,0) = int2d(Thjj)( (fgauss-rhojj)*d02 + d0*d2   );
      res(2,1) = int2d(Thjj)( (fgauss-rhojj)*d12 + d1*d2   );
      res(2,2) = int2d(Thjj)( (fgauss-rhojj)*d22 + d2*d2   );
      res(2,3) = int2d(Thjj)( (fgauss-rhojj)*d32 + d3*d2   );
      res(2,4) = int2d(Thjj)( (fgauss-rhojj)*d42 + d4*d2   );

      res(3,0) = int2d(Thjj)( (fgauss-rhojj)*d03 + d0*d3   );
      res(3,1) = int2d(Thjj)( (fgauss-rhojj)*d13 + d1*d3   );
      res(3,2) = int2d(Thjj)( (fgauss-rhojj)*d23 + d2*d3   );
      res(3,3) = int2d(Thjj)( (fgauss-rhojj)*d33 + d3*d3   );
      res(3,4) = int2d(Thjj)( (fgauss-rhojj)*d43 + d4*d3   );
      
      res(4,0) = int2d(Thjj)( (fgauss-rhojj)*d03 + d0*d4   );
      res(4,1) = int2d(Thjj)( (fgauss-rhojj)*d13 + d1*d4   );
      res(4,2) = int2d(Thjj)( (fgauss-rhojj)*d23 + d2*d4   );
      res(4,3) = int2d(Thjj)( (fgauss-rhojj)*d33 + d3*d4   );
      res(4,4) = int2d(Thjj)( (fgauss-rhojj)*d43 + d4*d4   );

      matrix result = res;

      return result;
      
    }
      
    /*===============================================================
       Fit using Ipopt
       ===============================================================*/
    cout << "********************************" << endl;
    cout << "Start Ipopt" << endl;
    cout << "********************************" << endl;
    cout << endl;
    cout << endl;

    if(displayplot > 3 && wwait == 1){
      /* Where is the vortex on the global mesh*/
      Phj wherej = 1;
      Ph where = wherej;
      string  titlewhere = "Vortex " + j;
      plot(where,fill=1,wait=1,cmm=titlewhere);
      /* Initial guess and solution of GPE */
      plot(Thj, wait=1, cmm= "Frist truncated mesh");
      plot(Thjj, wait = 1, cmm = "New truncated mesh"); /* Plot new mesh*/
      plot(rhojj, wait=1, cmm = "Solution of the GPE on the truncated mesh"); /*Plot the restricted solution on the truncated mesh*/
      /* Norm*/
      Vhjj fgaussinit = fgauss;
      real normbeforeipopt = sqrt(int2d(Thjj)( (rhojj-fgaussinit)^2 ));
      cout << "Norm 2 before ipopt : " << normbeforeipopt << endl;

      string titleinit = "Initial guess for the Gaussian fit. Norm2 = " + normbeforeipopt; 
      plot(fgaussinit,rhojj,dim=3,wait=wwait,cmm=titleinit);
    }
    
    /* Ipopt;*/
    bool vr;
    vr = IPOPT(Jgauss,DJgauss,DDJgauss,alphatilde,printlevel = 0);

    
    cout << "Ipopt convergence : " << vr << endl;     
    cout << endl;
    cout << "****************************" << endl;
    cout << "Init gauss parameters : " << alphainit << endl;
    cout << "Gauss parameters after IPOPT : " << alphatilde << endl;


    
    /* Result of the fitting*/
    alpha = alphatilde;
    Vhjj fgaussfinal = fgauss;
    /* Norm*/
    real normafteripopt = sqrt(int2d(Thjj)( (rhojj-fgaussfinal)^2 ));
    cout << "Norm 2 after ipopt : " << normafteripopt << endl;

    /* If user wants plots to be displayed*/
    if(displayplot > 3){
      string titleafter = "Display of rhoj and its fit. Norm2 = " + normafteripopt;
      //plot(fgaussfinal, wait=1, cmm="Final fit");
      plot(fgaussfinal,rhojj,dim=3,wait=wwait,cmm = titleafter);

      if(wwait == 1){ 
	Vhjj diff = abs( (fgaussfinal-rhojj) / rhojj);
	plot(diff,wait=1,cmm = "Difference");
      }
    }      

    cout << endl;
    cout << endl;
    cout << "********************************" << endl;
    cout << "End IPOPT" << endl;
    cout << "********************************" << endl;

    /*===============================================================
       Stats
       ===============================================================*/
    coordx[size] = alpha[0];
    coordy[size] = alpha[1];

    real eigval1 = .5*(alpha[2]+alpha[4]+sqrt( (alpha[2]-alpha[4])^2 + 4*alpha[3]^2   )   );
    real eigval2 = .5*(alpha[2]+alpha[4]-sqrt( (alpha[2]-alpha[4])^2 + 4*alpha[3]^2   )   );
    real sharpness = sqrt(pi*eigval1*eigval2);
    real dist = rG/distmax;
    
    stats(size,0) = dist;
    stats(size,1) = sharpness;
    stats(size,2) = normafteripopt;

    size++;

  }

  coordx.resize(size);
  coordy.resize(size);

  stats.resize(size,2);

  mesh Thv = triangulate(coordx,coordy);
  if(displayplot > 2) plot(Thv, wait=1, cmm = "Abrikosov");
  if(displayplot > 2) plot(Thv, rho, wait=1, cmm = "Abrikosov and GPE solution");
  cout << "Number of vertex : " << Thv.nv << endl;


  {
    ofstream datastats("stats.dat");
    datastats << stats << endl;
    }
  
}
EndMacro

fitvortex(Th,rho,lmtrue,r)