mesh Th=square(100,100,[x*2-1,y*2-1]);
load "isoline"
fespace Vh(Th,P1);
fespace Ph(Th,P0); 
func rr= sqrt((x+.5)^2+(y+.5)^2);
int k =5;
Vh u= sin(k*pi*x)*sin(k*pi*y);//rr*(1-rr);
//Vh u = rr*(1-rr);
plot(u, wait=1);
Ph r;


verbosity=3;
int[int] lm=findalllocalmin(Th,u[],r[],convex=1,eps=0);
plot(r,u,fill=1,wait=1);

cout << r[] <<endl; 
cout << lm << endl;


//***************************************************************************//
// Start fitting
//***************************************************************************//

real[int] a(3);
real[int] alpha(3);
//for(int i = 0; i<alpha.n; i++) alpha[i] = .5;
alpha[0] = 1;
alpha[1] = 14;
alpha[2] = 14;

for(int j = 0; j < lm.n; j++){
  int val = lm(j); // jth value in tab lm
  mesh Thr = trunc(Th, floor(r) == val); // trunc mesh by taking the triangles where r matches the desired value
  plot(Thr, wait = 1);
  fespace Vhr(Thr,P1); // Functionnal space P1 in this new smaller mesh
  Vhr ur = u; // Restrict old function to the new mesh
  plot(ur, wait=1);

  // Construct functionnal
  func real J(real[int] & alpha){
    for(int i = 0; i < alpha.n; i++) a[i] = alpha[i];
    func gaf = a[0]*sin(a[1]*x)*sin(a[2]*y);
    Vhr ga = gaf;
    real s = int2d(Thr)(.5*abs(ga-ur)^2 );
  return s;
  }

  // Construct functionnal derivative
  func real[int] DJ(real[int] & alpha){
    for(int i = 0; i < alpha.n; i++) a[i] = alpha[i];
    func gaf = a[0]*sin(a[1]*x)*sin(a[2]*y);
    Vhr ga = gaf;
    func dgaf0 = sin(a[1]*x)*sin(a[2]*y);
    Vhr dga0 = dgaf0;
    func dgaf1 = a[0]*x*cos(a[1]*x)*sin(a[2]*y);
    Vhr dga1 = dgaf1;
    func dgaf2 = a[0]*y*sin(a[1]*x)*cos(a[2]*y);
    Vhr dga2 = dgaf2;

    real[int] res(3);
    res(0) = int2d(Thr)( (ga-ur)*dga0 );
    res(1) = int2d(Thr)( (ga-ur)*dga1 );
    res(2) = int2d(Thr)( (ga-ur)*dga2 );

    return res;
  }
  
  // Fit using BFGS
  cout << "********************************" << endl;
  cout << "Start BFGS" << endl;
  cout << "********************************" << endl;
  cout << endl;
  cout << endl;
  cout << "Iter : " << j << endl;
  BFGS(J,DJ,alpha,eps=1.e-6,nbiter=15,nbiterline=20);
  cout << endl;
  cout << endl;
  cout << alpha << endl;
  cout << "********************************" << endl;
  cout << "End BFGS" << endl;
  cout << "********************************" << endl;

 }
