// Program to fit vortex from a pre-computed simulation
load "Element_P4";
load "iovtk";
load "ff-Ipopt";
load "gsl";
load "pipe";
load "isoline";
load "BEC";
load "fflapack"

ofstream fout("output.echo",append);

//===============================================================
// load functions and mesh
//===============================================================

include "BEC_2D_Macros.idp";
real ITER0=0.;

mesh Th = readmesh("BEC_2D-Classical-N-140000-Omega-1000_iter_00301.msh");

plot(Th, wait=1, cmm="Initial mesh");

fespace Vh (Th,P1);
fespace Ph (Th,P0);

Vh<complex> u;//, uconj;
Vh          rho; // densite
real        Normu; // norm of the solution \int(u^2)

// Load solution
restartload(u,"BEC_2D-Classical-N-140000-Omega-1000_iter_00301.rst",ITER0);

// Normalize solution (should already be ok)
//BECnormalize(Th,u,Normu,ur,ui,umod,"Initial cond : ",fout);
rho = abs(u)^2;

// plot initial solution
plot(rho, wait=1, cmm="Solution initial BEC");

// Compute distance from center
Ph dist = sqrt(x^2+y^2);
real distmax = dist[].max;
cout << "BEC radius : " << distmax << endl;


//===============================================================
// Fit
//===============================================================
Ph r;

//**************************************************
// Call findalllocalmin in isoline.cpp to find basins of attraction
//**************************************************
// lm stores vertex ind where min is reached;
// r attributes vertex to its jth minimum
int[int] lm=findalllocalmin(Th,rho[],r[]);

// Plot region matching basins of attraction
plot(r, fill=1, wait=1,  cmm="Basins of attraction");

// Variables
real [int,int] stats(lm.n,4);
real[int] xx(lm.n), yy(lm.n);
int size = 0; // count

//**************************************************
// Loop over each basin of attraction
//**************************************************
for(int j = 0; j < lm.n; j++){
  cout << "Nous sommes a l'iteration : " << j << " / " << lm.n << endl;
  
  // Trunc mesh -> reduce to one basin of attraction
  mesh Thj = trunc(Th, floor(r)==j, label = -1); // take the jth minimum

  // Declare Pi sub-espace related to the truncated mesh
  fespace Vhj(Thj,P1);
  fespace Phj(Thj,P0);

  // Restrict GPE solution to the truncated mesh
  Vhj uj = rho;

  // Compute useful parameters from truncated mesh
  int globalindmin = lm[j]; //ind of min on the global mesh
  real xjG = Th(globalindmin).x; // x coord for the min
  real yjG = Th(globalindmin).y; // y coord for the min
  real rG = sqrt(xjG^2+yjG^2); //dist from center of initial mesh
  
  //********************************************************************************
  // Restrict mesh by maximizing gradient
  //********************************************************************************
  if(rG < distmax*.75){ //if not to close from border
 
    if(Thj.nt > 20){ // Eliminate some parasites min
    
      varf vbord(u,v) = on(-1,u=uj); // Define varf to extract values of uj on the border
      real[int] vb = vbord(0,Vhj,tgv=1); // Stores these values in an array
      vb = vb ? vb : 10^8; // If inside the truncated mesh : 0 -> 10‚Å∏
      int whereminborder = vb.imin; // Find min on the border
      real xminborder = Thj(whereminborder).x; // x coord of this min
      real yminborder = Thj(whereminborder).y; // y coord of this min
      
      real radiusminborder = sqrt((xminborder-xjG)^2 + (yminborder-yjG)^2); // Distance from the center of the mesh to the min on border
    	
      mesh Thjj = trunc(Thj, (sqrt( (x-xjG)^2+(y-yjG)^2 ) < .8*radiusminborder), label = -2 ); // Trunc truncated mesh
  
      fespace Vhjj(Thjj,P1); // Define P1 functional space on this new mesh
      fespace Phjj(Thjj,P0); // Define P0 functional space on this new mesh
      
      Vhjj ujj = uj; // Restrict function on this new mesh

      //********************************************************************************
      // IONUT FIT : definition of functionnals and starting parameters
      real[int] ionut(3), ionutinit(3);
      real[int] ion(3);
      real R = uj[].max - uj[].min;
      real offset = ujj[].min;
	
      varf vbord2(uh,vh) = on(-2,uh=ujj);
      real[int] vb2 = vbord2(0,Vhjj,tgv=1);
      vb2 = vb2 ? vb2 : 10^8;
      cout << "Min border : " << vb2.min << endl;
      real minborder = .5*vb2.min;
      real val = (minborder-offset)/(R-minborder+offset);

      real[int,int] M(3,3);
      M(0,0) = int1d(Thjj,levelset=ujj-minborder)( (x-xjG)^4  );
      M(0,1) = int1d(Thjj,levelset=ujj-minborder)( 2*(x-xjG)^3*(y-yjG)  );
      M(0,2) = int1d(Thjj,levelset=ujj-minborder)( (x-xjG)^2*(y-yjG)^2  );
      M(1,0) = int1d(Thjj,levelset=ujj-minborder)( (x-xjG)^3*(y-yjG)  );
      M(1,1) = int1d(Thjj,levelset=ujj-minborder)( 2*(x-xjG)^2*(y-yjG)^2  );
      M(1,2) = int1d(Thjj,levelset=ujj-minborder)( (x-xjG)*(y-yjG)^3 );
      M(2,0) = int1d(Thjj,levelset=ujj-minborder)( (x-xjG)^2*(y-yjG)^2  );
      M(2,1) = int1d(Thjj,levelset=ujj-minborder)( 2*(y-yjG)^3*(x-xjG)  );
      M(2,2) = int1d(Thjj,levelset=ujj-minborder)( (y-yjG)^4  );
     
      inv(M);

      real[int] SM(3);
      SM(0) = int1d(Thjj,levelset=ujj-minborder)( (x-xjG)^2  )*val;
      SM(1) = int1d(Thjj,levelset=ujj-minborder)( (x-xjG)*(y-yjG)  )*val;
      SM(2) = int1d(Thjj,levelset=ujj-minborder)( (y-yjG)^2  )*val;

      ionut = M*SM;
	
      ionutinit = ionut;
	
      func r2a = (x-xjG)^2;
      func r2b = 2*(x-xjG)*(y-yjG);
      func r2c = (y-yjG)^2;
      
      // Ionut functionnal
      func real Jionut(real[int] & ionut){
      	for(int i = 0; i < ionut.n; i++) ion[i] = ionut[i];
      	func ri2 = ion[0]*(x-xjG)^2+2*ion[1]*(x-xjG)*(y-yjG)+ion[2]*(y-yjG)^2;
      	func fionut = offset + R*(ri2)/(1+ri2);
      	Vhjj vfionut = fionut;
      	real s = int2d(Thjj)(0.5*abs(vfionut-ujj)^2);
      	return s;
      }

      // Ionut functionnal derivative
      func real[int] DJionut(real [int] & ionut){
      	for(int i = 0; i < ionut.n; i++) ion[i] = ionut[i];
      	func ri2 = ion[0]*(x-xjG)^2+2*ion[1]*(x-xjG)*(y-yjG)+ion[2]*(y-yjG)^2;
      	func fionut = offset + R*(ri2)/(1+ri2);
      	Vhjj vfionut = fionut;
  
      	func fa = r2a*R/((1+ri2)^2);
      	Vhjj vfa = fa;

      	func fb = r2b*R/((1+ri2)^2);
      	Vhjj vfb = fb;

      	func fc = r2c*R/((1+ri2)^2);
      	Vhjj vfc = fc;
  
      	real[int] res(3);
      	res[0] = int2d(Thjj)( (vfionut-ujj)*vfa  );
      	res[1] = int2d(Thjj)( (vfionut-ujj)*vfb  );
      	res[2] = int2d(Thjj)( (vfionut-ujj)*vfc  );

      	return res;
  
      }

      
      // //********************************************************************************



      
      //********************************************************************************
      // Fit using Ipopt
      cout << "********************************" << endl;
      cout << "Start Ipopt" << endl;
      cout << "********************************" << endl;
      cout << endl;
      cout << endl;

      // Ipopt;
      bool vr;
      vr = IPOPT(Jionut,DJionut,ionut);
      cout << "Bool : " << vr << endl;     
      cout << endl;
      cout << "****************************" << endl;
      cout << "Ionut init : " << ionutinit << endl;
      cout << "Ionut after BFGS : " << ionut << endl;

      //********************************************************************************

      
      if(vr){
	func ri2f = ionut[0]*(x-xjG)^2+2*ionut[1]*(x-xjG)*(y-yjG)+ionut[2]*(y-yjG)^2;
	func fionutf = offset + R*(ri2f)/(1+ri2f);
	Vhjj ga = fionutf;
	Vh baryx = floor(15*(x-xjG));
	Vh baryy = floor(15*(y-yjG));
	baryx[] = baryx[] ? 0 : 1;
	baryy[] = baryy[] ? 0 : 1;
	string pltitle = "Where is the vortex center : " + j ;
	plot(rho,baryx,baryy,wait=1,cmm=pltitle);
	plot(rho, wait=1);
	plot(ujj,wait=1,cmm="Ujj on Thjj");
	plot(ga,wait=1,cmm="Final fit");
	plot(ga,ujj,wait=1,cmm="Both");
	Vhjj diff = abs( (ga-ujj) / ujj);
      plot(diff,wait=1,cmm = "Difference");
      }
      
      //********************************************************************************
      cout << endl;
      cout << endl;
      cout << "********************************" << endl;
      cout << "End IPOPT" << endl;
      cout << "********************************" << endl;
      //********************************************************************************

      //********************************************************************************
      // Stats
      xx[size] = xjG;
      yy[size] = yjG;

      real eigval1 = .5*(ionut[0]+ionut[2]+sqrt( (ionut[0]-ionut[2])^2 + 4*ionut[1]^2   )   );
      real eigval2 = .5*(ionut[0]+ionut[2]-sqrt( (ionut[0]-ionut[2])^2 + 4*ionut[1]^2   )   );

      real eccentricity = sqrt(1 - min(eigval1,eigval2)^2/max(eigval1,eigval2)^2 );
      real sharpness = sqrt(pi*eigval1*eigval2);

      stats(size,0) = rG;
      stats(size,1) = R;
      stats(size,2) = eccentricity;
      stats(size,3) = sharpness;



      size++;
      //*******************************************************************************

      
    }
  }
 }

xx.resize(size);
yy.resize(size);

stats.resize(size,4);

mesh Thv = triangulate(xx,yy);
plot(Thv, wait=1);
plot(Thv, rho, wait=1);
cout << "Number of vertex : " << Thv.nv << endl;

cout << stats << endl;

{
ofstream datastats("stats.dat");
for(int i1 = 0; i1 < size; i1++){
  for(int i2 = 0; i2 < 4; i2++){
    datastats << stats(i1,i2) << "  "; 
  }
  datastats << endl;
 }
}